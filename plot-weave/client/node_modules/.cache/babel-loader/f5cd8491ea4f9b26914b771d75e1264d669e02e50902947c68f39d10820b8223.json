{"ast":null,"code":"var _jsxFileName = \"/Users/lukemickan/Desktop/Plot Weave/Plot-Weave/plot-weave/client/src/pages/Weave.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_SINGLE_POST, QUERY_WEAVES } from '../utils/queries';\nimport { ADD_WEAVE } from '../utils/mutations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Sentences() {\n  _s();\n  const [weaveText, setWeaveText] = useState('');\n  const [weaveTitle, setWeaveTitle] = useState('');\n  const [characterCount, setCharacterCount] = useState(0);\n  const [addWeave, {\n    error\n  }] = useMutation(ADD_WEAVE, {\n    update(cache, _ref) {\n      let {\n        data: {\n          addWeave\n        }\n      } = _ref;\n      try {\n        const weaves = cache.readQuery({\n          query: QUERY_WEAVES\n        });\n        cache.writeQuery({\n          query: QUERY_WEAVES,\n          data: {\n            weaves: [addWeave, weaves]\n          }\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  });\n  const {\n    postId,\n    sentences\n  } = useParams();\n  const sentenceIndexes = sentences.split(',');\n\n  // Fetch the post data from the server\n  const {\n    loading,\n    error: postError,\n    data\n  } = useQuery(QUERY_SINGLE_POST, {\n    variables: {\n      postId\n    }\n  });\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 23\n  }, this);\n  if (postError) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 25\n  }, this);\n  const post = data.post;\n\n  // Extract the selected sentences from the post text\n  const postSentences = post.postText.split('.').map((sentence, index) => {\n    if (sentenceIndexes.includes(index.toString())) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [sentence.trim(), \". \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 14\n      }, this);\n    } else {\n      return null;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Selected Sentences\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: postSentences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(Sentences, \"C5sPSt8fu6oG2u+0NalfYy7xreE=\", false, function () {\n  return [useMutation, useParams, useQuery];\n});\n_c = Sentences;\n;\nexport default Sentences;\nvar _c;\n$RefreshReg$(_c, \"Sentences\");","map":{"version":3,"names":["React","useParams","useState","useQuery","useMutation","QUERY_SINGLE_POST","QUERY_WEAVES","ADD_WEAVE","jsxDEV","_jsxDEV","Sentences","_s","weaveText","setWeaveText","weaveTitle","setWeaveTitle","characterCount","setCharacterCount","addWeave","error","update","cache","_ref","data","weaves","readQuery","query","writeQuery","e","console","postId","sentences","sentenceIndexes","split","loading","postError","variables","children","fileName","_jsxFileName","lineNumber","columnNumber","post","postSentences","postText","map","sentence","index","includes","toString","trim","_c","$RefreshReg$"],"sources":["/Users/lukemickan/Desktop/Plot Weave/Plot-Weave/plot-weave/client/src/pages/Weave.js"],"sourcesContent":["import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useState } from 'react';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_SINGLE_POST, QUERY_WEAVES } from '../utils/queries';\nimport { ADD_WEAVE } from '../utils/mutations';\n\nfunction Sentences (){\n\n  const [weaveText, setWeaveText] = useState('');\n  const [weaveTitle, setWeaveTitle] = useState('');\n\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const [addWeave, { error }] = useMutation(ADD_WEAVE, {\n    update(cache, { data: { addWeave } }) {\n      try {\n        const weaves  = cache.readQuery({ query: QUERY_WEAVES });\n\n        cache.writeQuery({\n          query: QUERY_WEAVES,\n          data: { weaves: [addWeave, weaves] },\n        });\n      } catch (e) {\n        console.error(e);\n      }\n\n\n    },\n  });\n\n  const { postId, sentences } = useParams();\n  const sentenceIndexes = sentences.split(',');\n\n  // Fetch the post data from the server\n  const { loading, error: postError, data } = useQuery(QUERY_SINGLE_POST, {\n    variables: { postId }\n  });\n\n  if (loading) return <p>Loading...</p>;\n  if (postError) return <p>Error</p>;\n\n  const post = data.post;\n\n  // Extract the selected sentences from the post text\n  const postSentences = post.postText.split('.').map((sentence, index) => {\n    if (sentenceIndexes.includes(index.toString())) {\n      return <span key={index}>{sentence.trim()}. </span>;\n    } else {\n      return null;\n    }\n  });\n\n  return (\n    <div>\n      <h1>Selected Sentences</h1>\n      <div>{postSentences}</div>\n    </div>\n  );\n};\n\nexport default Sentences;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}