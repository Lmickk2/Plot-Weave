{"ast":null,"code":"var _jsxFileName = \"/Users/lukemickan/Desktop/Plot Weave/Plot-Weave/plot-weave/client/src/pages/Weave.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n// import { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport { ADD_POST, ADD_WEAVE } from '../utils/mutations';\nimport { QUERY_POSTS, QUERY_WEAVES } from '../utils/queries';\nimport Auth from '../utils/auth';\nimport NotAuthorized from '../Components/NotAuthorized';\nimport { Helmet } from \"react-helmet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Weave = _ref => {\n  _s();\n  let {\n    match,\n    selectedText\n  } = _ref;\n  console.log(match.params.postId, match.params.url);\n  const [postText, setPostText] = useState(selectedText);\n  const [postTitle, setPostTitle] = useState('');\n  const [weaveTitle, setWeaveTitle] = useState('');\n  const [characterCount, setCharacterCount] = useState(0);\n  const [addPost, {\n    error\n  }] = useMutation(ADD_POST, {\n    update(cache, _ref2) {\n      let {\n        data: {\n          addPost\n        }\n      } = _ref2;\n      try {\n        const posts = cache.readQuery({\n          query: QUERY_POSTS\n        });\n        cache.writeQuery({\n          query: QUERY_POSTS,\n          data: {\n            posts: [addPost, posts]\n          }\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weave\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Post ID: \", postId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Sentence Index: \", sentenceIndex]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(Weave, \"WIJQhMBK7ZNb2jwKdzIikGRjHS8=\", false, function () {\n  return [useMutation];\n});\n_c = Weave;\nexport default Weave;\nvar _c;\n$RefreshReg$(_c, \"Weave\");","map":{"version":3,"names":["React","useState","useEffect","useMutation","ADD_POST","ADD_WEAVE","QUERY_POSTS","QUERY_WEAVES","Auth","NotAuthorized","Helmet","jsxDEV","_jsxDEV","Weave","_ref","_s","match","selectedText","console","log","params","postId","url","postText","setPostText","postTitle","setPostTitle","weaveTitle","setWeaveTitle","characterCount","setCharacterCount","addPost","error","update","cache","_ref2","data","posts","readQuery","query","writeQuery","e","children","fileName","_jsxFileName","lineNumber","columnNumber","sentenceIndex","_c","$RefreshReg$"],"sources":["/Users/lukemickan/Desktop/Plot Weave/Plot-Weave/plot-weave/client/src/pages/Weave.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n// import { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n\nimport { ADD_POST, ADD_WEAVE } from '../utils/mutations';\nimport { QUERY_POSTS, QUERY_WEAVES } from '../utils/queries';\n\nimport Auth from '../utils/auth';\nimport NotAuthorized from '../Components/NotAuthorized';\nimport { Helmet } from \"react-helmet\";\n\nconst Weave = ({ match, selectedText }) => {\n  console.log(match.params.postId, match.params.url);\n  const [postText, setPostText] = useState(selectedText);\n  const [postTitle, setPostTitle] = useState('');\n  const [weaveTitle, setWeaveTitle] =useState('');\n\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const [addPost, { error }] = useMutation(ADD_POST, {\n    update(cache, { data: { addPost } }) {\n      try {\n        const posts  = cache.readQuery({ query: QUERY_POSTS });\n\n        cache.writeQuery({\n          query: QUERY_POSTS,\n          data: { posts: [addPost, posts] },\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    },\n  });\n\n  return (\n    <div>\n      <h1>Weave</h1>\n      <p>Post ID: {postId}</p>\n      <p>Sentence Index: {sentenceIndex}</p>\n    </div>\n  );\n};\n\nexport default Weave;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD;AACA,SAASC,WAAW,QAAQ,gBAAgB;AAE5C,SAASC,QAAQ,EAAEC,SAAS,QAAQ,oBAAoB;AACxD,SAASC,WAAW,EAAEC,YAAY,QAAQ,kBAAkB;AAE5D,OAAOC,IAAI,MAAM,eAAe;AAChC,OAAOC,aAAa,MAAM,6BAA6B;AACvD,SAASC,MAAM,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,KAAK,GAAGC,IAAA,IAA6B;EAAAC,EAAA;EAAA,IAA5B;IAAEC,KAAK;IAAEC;EAAa,CAAC,GAAAH,IAAA;EACpCI,OAAO,CAACC,GAAG,CAACH,KAAK,CAACI,MAAM,CAACC,MAAM,EAAEL,KAAK,CAACI,MAAM,CAACE,GAAG,CAAC;EAClD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGvB,QAAQ,CAACgB,YAAY,CAAC;EACtD,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC0B,UAAU,EAAEC,aAAa,CAAC,GAAE3B,QAAQ,CAAC,EAAE,CAAC;EAE/C,MAAM,CAAC4B,cAAc,EAAEC,iBAAiB,CAAC,GAAG7B,QAAQ,CAAC,CAAC,CAAC;EAEvD,MAAM,CAAC8B,OAAO,EAAE;IAAEC;EAAM,CAAC,CAAC,GAAG7B,WAAW,CAACC,QAAQ,EAAE;IACjD6B,MAAMA,CAACC,KAAK,EAAAC,KAAA,EAAyB;MAAA,IAAvB;QAAEC,IAAI,EAAE;UAAEL;QAAQ;MAAE,CAAC,GAAAI,KAAA;MACjC,IAAI;QACF,MAAME,KAAK,GAAIH,KAAK,CAACI,SAAS,CAAC;UAAEC,KAAK,EAAEjC;QAAY,CAAC,CAAC;QAEtD4B,KAAK,CAACM,UAAU,CAAC;UACfD,KAAK,EAAEjC,WAAW;UAClB8B,IAAI,EAAE;YAAEC,KAAK,EAAE,CAACN,OAAO,EAAEM,KAAK;UAAE;QAClC,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOI,CAAC,EAAE;QACVvB,OAAO,CAACc,KAAK,CAACS,CAAC,CAAC;MAClB;IACF;EACF,CAAC,CAAC;EAEF,oBACE7B,OAAA;IAAA8B,QAAA,gBACE9B,OAAA;MAAA8B,QAAA,EAAI;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACdlC,OAAA;MAAA8B,QAAA,GAAG,WAAS,EAACrB,MAAM;IAAA;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACxBlC,OAAA;MAAA8B,QAAA,GAAG,kBAAgB,EAACK,aAAa;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAClC;AAEV,CAAC;AAAC/B,EAAA,CA9BIF,KAAK;EAAA,QAQoBV,WAAW;AAAA;AAAA6C,EAAA,GARpCnC,KAAK;AAgCX,eAAeA,KAAK;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}