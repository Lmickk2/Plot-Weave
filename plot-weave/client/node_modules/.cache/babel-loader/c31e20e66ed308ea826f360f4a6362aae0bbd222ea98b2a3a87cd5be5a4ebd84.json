{"ast":null,"code":"var _jsxFileName = \"/Users/lukemickan/Desktop/Plot Weave/Plot-Weave/plot-weave/client/src/pages/Weave.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_SINGLE_POST } from '../utils/queries';\nimport { ADD_WEAVE } from '../utils/mutations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Sentences() {\n  _s();\n  const [postText, setPostText] = useState('');\n  const [postTitle, setPostTitle] = useState('');\n  // Use `useParams()` to retrieve value of the route parameters `:postId` and `:sentences`\n  const {\n    postId,\n    sentences\n  } = useParams();\n\n  // Split the selected sentences into an array of sentence indexes\n  const sentenceIndexes = sentences.split(',');\n\n  // Fetch the post data from the server\n  // ...\n\n  // Extract the selected sentences from the post text\n  const postSentences = post.postText.split('.').map((sentence, index) => {\n    if (sentenceIndexes.includes(index.toString())) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [sentence.trim(), \". \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 14\n      }, this);\n    } else {\n      return null;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Selected Sentences\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: postSentences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(Sentences, \"zfjKBkQghuXF19BTZ2rO32prO5w=\", false, function () {\n  return [useParams];\n});\n_c = Sentences;\n;\nexport default Sentences;\nvar _c;\n$RefreshReg$(_c, \"Sentences\");","map":{"version":3,"names":["React","useParams","useState","useQuery","QUERY_SINGLE_POST","ADD_WEAVE","jsxDEV","_jsxDEV","Sentences","_s","postText","setPostText","postTitle","setPostTitle","postId","sentences","sentenceIndexes","split","postSentences","post","map","sentence","index","includes","toString","children","trim","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/lukemickan/Desktop/Plot Weave/Plot-Weave/plot-weave/client/src/pages/Weave.js"],"sourcesContent":["import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_SINGLE_POST } from '../utils/queries';\nimport { ADD_WEAVE } from '../utils/mutations';\n\nfunction Sentences (){\n  \n  const [postText, setPostText] = useState('');\n  const [postTitle, setPostTitle] = useState('');\n  // Use `useParams()` to retrieve value of the route parameters `:postId` and `:sentences`\n  const { postId, sentences } = useParams();\n\n  // Split the selected sentences into an array of sentence indexes\n  const sentenceIndexes = sentences.split(',');\n\n  // Fetch the post data from the server\n  // ...\n\n  // Extract the selected sentences from the post text\n  const postSentences = post.postText.split('.').map((sentence, index) => {\n    if (sentenceIndexes.includes(index.toString())) {\n      return <span key={index}>{sentence.trim()}. </span>;\n    } else {\n      return null;\n    }\n  });\n\n  return (\n    <div>\n      <h1>Selected Sentences</h1>\n      <div>{postSentences}</div>\n    </div>\n  );\n};\n\nexport default Sentences;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,iBAAiB,QAAQ,kBAAkB;AACpD,SAASC,SAAS,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAEnB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C;EACA,MAAM;IAAEY,MAAM;IAAEC;EAAU,CAAC,GAAGd,SAAS,EAAE;;EAEzC;EACA,MAAMe,eAAe,GAAGD,SAAS,CAACE,KAAK,CAAC,GAAG,CAAC;;EAE5C;EACA;;EAEA;EACA,MAAMC,aAAa,GAAGC,IAAI,CAACT,QAAQ,CAACO,KAAK,CAAC,GAAG,CAAC,CAACG,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,KAAK;IACtE,IAAIN,eAAe,CAACO,QAAQ,CAACD,KAAK,CAACE,QAAQ,EAAE,CAAC,EAAE;MAC9C,oBAAOjB,OAAA;QAAAkB,QAAA,GAAmBJ,QAAQ,CAACK,IAAI,EAAE,EAAC,IAAE;MAAA,GAA1BJ,KAAK;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAA4B;IACrD,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF,CAAC,CAAC;EAEF,oBACEvB,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAAkB,QAAA,EAAI;IAAkB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAC3BvB,OAAA;MAAAkB,QAAA,EAAMP;IAAa;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAO;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACtB;AAEV;AAACrB,EAAA,CA5BQD,SAAS;EAAA,QAKcP,SAAS;AAAA;AAAA8B,EAAA,GALhCvB,SAAS;AA4BjB;AAED,eAAeA,SAAS;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}