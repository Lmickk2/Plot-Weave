{"ast":null,"code":"var _jsxFileName = \"/Users/lukemickan/Desktop/Plot Weave/Plot-Weave/plot-weave/client/src/pages/Weave.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_SINGLE_POST, QUERY_WEAVES } from '../utils/queries';\nimport { ADD_WEAVE } from '../utils/mutations';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Sentences() {\n  _s();\n  var _data;\n  const [weaveText, setWeaveText] = useState('');\n  const [weaveTitle, setWeaveTitle] = useState('');\n  const [characterCount, setCharacterCount] = useState(0);\n  const [addWeave, {\n    error\n  }] = useMutation(ADD_WEAVE, {\n    update(cache, _ref) {\n      let {\n        data: {\n          addWeave\n        }\n      } = _ref;\n      try {\n        const weaves = cache.readQuery({\n          query: QUERY_WEAVES\n        });\n        cache.writeQuery({\n          query: QUERY_WEAVES,\n          data: {\n            weaves: [addWeave, weaves]\n          }\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  });\n  const post = ((_data = data) === null || _data === void 0 ? void 0 : _data.post) || {};\n\n  // Use `useParams()` to retrieve value of the route parameters `:postId` and `:sentences`\n  const {\n    postId,\n    sentences\n  } = useParams();\n\n  // Split the selected sentences into an array of sentence indexes\n  const sentenceIndexes = sentences.split(',');\n\n  // Fetch the post data from the server\n  // ...\n\n  // Extract the selected sentences from the post text\n  const postSentences = post.postText.split('.').map((sentence, index) => {\n    if (sentenceIndexes.includes(index.toString())) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [sentence.trim(), \". \"]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 14\n      }, this);\n    } else {\n      return null;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Selected Sentences\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: postSentences\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(Sentences, \"gBH8ifjW9RJrHvIq3BnrjnULxFM=\", true, function () {\n  return [useParams];\n});\n_c = Sentences;\n;\nexport default Sentences;\nvar _c;\n$RefreshReg$(_c, \"Sentences\");","map":{"version":3,"names":["React","useParams","useState","useQuery","QUERY_SINGLE_POST","QUERY_WEAVES","ADD_WEAVE","jsxDEV","_jsxDEV","Sentences","_s","_data","weaveText","setWeaveText","weaveTitle","setWeaveTitle","characterCount","setCharacterCount","addWeave","error","useMutation","update","cache","_ref","data","weaves","readQuery","query","writeQuery","e","console","post","postId","sentences","sentenceIndexes","split","postSentences","postText","map","sentence","index","includes","toString","children","trim","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/lukemickan/Desktop/Plot Weave/Plot-Weave/plot-weave/client/src/pages/Weave.js"],"sourcesContent":["import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_SINGLE_POST, QUERY_WEAVES } from '../utils/queries';\nimport { ADD_WEAVE } from '../utils/mutations';\n\nfunction Sentences (){\n\n  const [weaveText, setWeaveText] = useState('');\n  const [weaveTitle, setWeaveTitle] = useState('');\n\n  const [characterCount, setCharacterCount] = useState(0);\n\n  const [addWeave, { error }] = useMutation(ADD_WEAVE, {\n    update(cache, { data: { addWeave } }) {\n      try {\n        const weaves  = cache.readQuery({ query: QUERY_WEAVES });\n\n        cache.writeQuery({\n          query: QUERY_WEAVES,\n          data: { weaves: [addWeave, weaves] },\n        });\n      } catch (e) {\n        console.error(e);\n      }\n\n\n    },\n  });\n\n  const post = data?.post || {};\n\n  // Use `useParams()` to retrieve value of the route parameters `:postId` and `:sentences`\n  const { postId, sentences } = useParams();\n\n  // Split the selected sentences into an array of sentence indexes\n  const sentenceIndexes = sentences.split(',');\n\n  // Fetch the post data from the server\n  // ...\n\n  // Extract the selected sentences from the post text\n  const postSentences = post.postText.split('.').map((sentence, index) => {\n    if (sentenceIndexes.includes(index.toString())) {\n      return <span key={index}>{sentence.trim()}. </span>;\n    } else {\n      return null;\n    }\n  });\n\n  return (\n    <div>\n      <h1>Selected Sentences</h1>\n      <div>{postSentences}</div>\n    </div>\n  );\n};\n\nexport default Sentences;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,QAAQ,QAAQ,gBAAgB;AACzC,SAASC,iBAAiB,EAAEC,YAAY,QAAQ,kBAAkB;AAClE,SAASC,SAAS,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,KAAA;EAEnB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAM,CAACc,cAAc,EAAEC,iBAAiB,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EAEvD,MAAM,CAACgB,QAAQ,EAAE;IAAEC;EAAM,CAAC,CAAC,GAAGC,WAAW,CAACd,SAAS,EAAE;IACnDe,MAAMA,CAACC,KAAK,EAAAC,IAAA,EAA0B;MAAA,IAAxB;QAAEC,IAAI,EAAE;UAAEN;QAAS;MAAE,CAAC,GAAAK,IAAA;MAClC,IAAI;QACF,MAAME,MAAM,GAAIH,KAAK,CAACI,SAAS,CAAC;UAAEC,KAAK,EAAEtB;QAAa,CAAC,CAAC;QAExDiB,KAAK,CAACM,UAAU,CAAC;UACfD,KAAK,EAAEtB,YAAY;UACnBmB,IAAI,EAAE;YAAEC,MAAM,EAAE,CAACP,QAAQ,EAAEO,MAAM;UAAE;QACrC,CAAC,CAAC;MACJ,CAAC,CAAC,OAAOI,CAAC,EAAE;QACVC,OAAO,CAACX,KAAK,CAACU,CAAC,CAAC;MAClB;IAGF;EACF,CAAC,CAAC;EAEF,MAAME,IAAI,GAAG,EAAApB,KAAA,GAAAa,IAAI,cAAAb,KAAA,uBAAJA,KAAA,CAAMoB,IAAI,KAAI,CAAC,CAAC;;EAE7B;EACA,MAAM;IAAEC,MAAM;IAAEC;EAAU,CAAC,GAAGhC,SAAS,EAAE;;EAEzC;EACA,MAAMiC,eAAe,GAAGD,SAAS,CAACE,KAAK,CAAC,GAAG,CAAC;;EAE5C;EACA;;EAEA;EACA,MAAMC,aAAa,GAAGL,IAAI,CAACM,QAAQ,CAACF,KAAK,CAAC,GAAG,CAAC,CAACG,GAAG,CAAC,CAACC,QAAQ,EAAEC,KAAK,KAAK;IACtE,IAAIN,eAAe,CAACO,QAAQ,CAACD,KAAK,CAACE,QAAQ,EAAE,CAAC,EAAE;MAC9C,oBAAOlC,OAAA;QAAAmC,QAAA,GAAmBJ,QAAQ,CAACK,IAAI,EAAE,EAAC,IAAE;MAAA,GAA1BJ,KAAK;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAA4B;IACrD,CAAC,MAAM;MACL,OAAO,IAAI;IACb;EACF,CAAC,CAAC;EAEF,oBACExC,OAAA;IAAAmC,QAAA,gBACEnC,OAAA;MAAAmC,QAAA,EAAI;IAAkB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eAC3BxC,OAAA;MAAAmC,QAAA,EAAMP;IAAa;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAO;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACtB;AAEV;AAACtC,EAAA,CAlDQD,SAAS;EAAA,QA2BcR,SAAS;AAAA;AAAAgD,EAAA,GA3BhCxC,SAAS;AAkDjB;AAED,eAAeA,SAAS;AAAC,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}